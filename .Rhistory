rm(list = ls())
data.raw <- read.csv("Ch10Ex11.csv", header = FALSE)
hclust.complete <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'complete')
plot(hclust_complete, main = 'linkage type: complete')
hclust.complete <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'complete')
plot(hclust.complete, main = 'linkage type: complete')
hclust.complete <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'complete')
plot(hclust.complete, main = 'linkage type: complete')
hclust.single <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'single')
plot(hclust.single, main = 'linkage type: single')
hclust.average <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'average')
plot(hclust.average, main = 'linkage type: average')
hclust.mcquitty <- hclust(as.dist(1-cor(data.raw[,1:40])), method = 'mcquitty')
plot(hclust.mcquitty, main = 'linkage type: mcquitty')
result.pca <- prcomp(data.raw[,1:40])
names(result.pca) #[1] "sdev" "rotation" "center" "scale" "x"
#obtain the principal component loadings
result.pca$rotation
head(result.pca$rotation)
#compute the total loadings for each column
sum_load <- apply(result.pca$rotation, 1, sum)
top5_load <- order(abs(sum_load), decreasing = TRUE)[1:5]
top5_load #this five genes [2,
result.pca <- prcomp(data.raw[,1:40])
names(result.pca)
#result.pca$rotation
#head(result.pca$rotation)
sum <- apply(result.pca$rotation, 1, sum)
top5 <- order(abs(sum), decreasing = TRUE)[1:5]
top5
result.pca <- prcomp(data.raw[,1:40])
names(result.pca)
#result.pca$rotation
#head(result.pca$rotation)
sum <- apply(result.pca$rotation, 1, sum)
(top5 <- order(abs(sum), decreasing = TRUE)[1:5])
getwd()
rm(list = ls())
library(ISLR)
set.seed(888)
dataset <- USArrests
complete_hclust <- hclust(dist(dataset), method = 'complete')
plot(complete_hclust, main = 'Dendrogram')
data.raw <- USArrests
clust.complete <- hclust(dist(data.raw), method = 'complete')
plot(clust.complete, main = 'Dendrogram')
set.seed(234)
result.pca <- prcomp(data)
plot(result.pca$x[,1:2], pch = 19, xlab = 'Z1', ylab = 'Z2', col = seq(1,3))
set.seed(123)
data <- matrix(rnorm(20*50*3, mean = 0, sd = 0.1), ncol = 50)
data[1:20, 2] <- 2
data[21:40, c(1,2)] <- 2
data[41:60, 1] <- 1
set.seed(234)
result.pca <- prcomp(data)
plot(result.pca$x[,1:2], pch = 19, xlab = 'Z1', ylab = 'Z2', col = seq(1,3))
set.seed(456)
result.kmeans <- kmeans(data, 3, nstart = 20)
true.labels <- c(rep(1, 20), rep(2, 20), rep(3, 20))
result.kmeans$cluster
table(true.labels, result.kmeans$cluster)
set.seed(789)
result.kmeans <- kmeans(data, 2, nstart = 20)
true.labels <- c(rep(1, 20), rep(2, 20), rep(3, 20))
table(true.labels, result.kmeans$cluster)
set.seed(999)
scaled_r <- scale(data)
result.kmeans <- kmeans(scaled_r, 3, nstart = 20)
true.labels <- c(rep(1, 20), rep(2, 20), rep(3, 20))
table(true.labels, result.kmeans$cluster)
set.seed(999)
data.scaled <- scale(data)
result.kmeans <- kmeans(data.scaled, 3, nstart = 20)
true.labels <- c(rep(1, 20), rep(2, 20), rep(3, 20))
table(true.labels, result.kmeans$cluster)
set.seed(888)
data.scaled <- scale(data)
result.kmeans <- kmeans(data.scaled, 3, nstart = 20)
true.labels <- c(rep(1, 20), rep(2, 20), rep(3, 20))
table(true.labels, result.kmeans$cluster)
rm(list = ls())
data(state)
state.x77
data.state <- state.x77
library(cluster)
which(is.na(state))
which(is.na(data.state))
data.state <- scale(state.x77)
prcomp(dataset)
prcomp(data.state)
?procomp
??procomp
??princomp
x11()
biplot(pca, xlim=c(-0.3, 0.4), ylim=c(-0.3, 0.3), main = "Biplot")
pca <- prcomp(data.state)
x11()
biplot(pca, xlim=c(-0.3, 0.4), ylim=c(-0.3, 0.3), main = "Biplot")
gap.kemeans <- clusGap(data.state, kmeans, nstart = 1, K.max = 8, B = 100)
x11()
plot(gap_km, main = "Gap Statistic: k-means")
gap.kemeans <- clusGap(data.state, kmeans, nstart = 1, K.max = 8, B = 100)
x11()
plot(gap.kemeans, main = "Gap Statistic: k-means")
biplot(pca, xlim=c(-0.3, 0.4), ylim=c(-0.3, 0.3), main = "Biplot")
x11()
biplot(pca, xlim=c(-0.3, 0.4), ylim=c(-0.3, 0.3), main = "Biplot")
x11()
plot(gap.kemeans, main = "gap statistic by k-means")
distance <- dist(data.state)
dim(as.matrix(distance))
kmeans.3 <- kmeans(data.state, 3, nstart = 20)
sil.3 <- silhouette(kmeans.3$cluster, dist = distance)
summary(sil.3)
X11()
plot(sil.3, main = "when k = 3")
X11()
plot(sil.4, main = "when k = 4")
kmeans.4 <- kmeans(data.state, 4, nstart = 20)
sil.4 <- silhouette(kmeans.4$cluster, dist = distance)
X11()
plot(sil.4, main = "when k = 4")
fviz_cluster(kmeans.3, data = data.state)
library(factoextra)
fviz_cluster(kmeans.3, data = data.state)
X11()
fviz_cluster(kmeans.3, data = data.state)
X11()
fviz_cluster(kmeans.4, data = data.state)
rm(list= ls())
graphics.off()
library(gRain)
library(Rgraphviz)
library(gRbase)
library(ggm)
library(bnlearn)
library(igraph)
load("D:/OneDrive/study/data mining II/quiz4.18/yeast.RData")
sapply(yeast, function(x) sum(is.na(x)))
rm(list= ls())
graphics.off()
library(gRain)
library(Rgraphviz)
library(gRbase)
library(ggm)
library(bnlearn)
library(igraph)
load("D:/OneDrive/study/data mining II/quiz4.18/yeast.RData")
is.na(yeast)
yeast.bn <- hc(yeast)
net <- as(amat(yeast.bn), "graphNEL")
x11()
plot(net)
x11()
plot(net)
gt = grain(net, data=yeast)
grnb= compile(gt)
## Propagate the the network
grnb=propagate(gt)
## (b)
gt = grain(net, data=yeast)
grnb=propagate(gt)
grnb.ev <- setFinding(grnb, nodes = c("Qchr4", "Qchr3","MSK1 "), states = c("1", "2","-1"))
(before.m1 <- querygrain(grnb , nodes = c("TAT2"), type = "marginal"))
(before.j1 <- querygrain(grnb , nodes = c("TAT2"), type = "joint"))
(after.m1 <- querygrain(grnb.ev , nodes = c("TAT2"), type = "marginal"))
(after.1j <- querygrain(grnb.ev , nodes = c("TAT2"), type = "joint"))
(before.2m<- querygrain(grnb , nodes = c("TAT2","MSK1"), type = "marginal"))
(before.2j <- querygrain(grnb , nodes = c("TAT2","MSK1"), type = "joint"))
(before.2c <- querygrain(grnb , nodes = c("TAT2","MSK1"), type = "conditional"))
(after.2m <- querygrain(grnb.ev , nodes = c("TAT2","MSK1"), type = "marginal"))
(after.2j <- querygrain(grnb.ev , nodes = c("TAT2","MSK1"), type = "joint"))
(after.2c <- querygrain(grnb.ev , nodes = c("TAT2","MSK1"), type = "conditional"))
install.packages("factoextra")
?pamk
??pamk
rm(list = ls())
setwd("D:\\OneDrive\\study\\data mining II\\project")
library(png)
files <- list.files(path="data//Pictures", pattern=".png",all.files=T, full.names=T, no.. = T)
images.male <- lapply(files, readPNG)
library(imager)
install.packages("imager")
library(imager)
im<-load.image(files[1])
plot(im)
plot(grayscale(parrots))
plot(grayscale(im))
plot(im)
class(im)
im
grayscale(im) %>% plot
grayscale(im)
colorMode(im)
channels(im,1:2,drop = T)
plot(channels(im,1:2,drop = T))
c <- channels(im,1:2,drop = T)
class(c)
display(c)
display(c[[1]])
c <- channels(im,1,drop = T)
display(c)
c <- channels(im,"gray")
c <- channels(im,"black")
im
c <- channel(im,"black")
channel(im)
channels(im)
channels(im)[[0]]
channel(im,"black")
c <- channel(im,"gray")
c <- channel(im,ind = 1)
display(c)
plot(c)
c <- channel(im,ind = 2)
plot(c)
c <- channel(im,ind = 3)
plot(c)
c <- channel(im,ind = 4)
plot(c)
c <- channel(im,ind = 1)
plot(c)
c
as.array(c)
head(as.data.frame(c))
a <- as.data.frame(c)
dim(a)
dim(a$x)
ncol(a$x)
length(a$x)
as.array(c)
as.vector(c)
sqrt(15384)
l <- readPNG(files[1])
l[1]
l
dim(l)
class(l)
l[,,1]
diml[,,1]
dim(l[,,1])
table(l[,,1])
class(l[,,1])
m <- l[,,1]
as.vector(m)
length(as.vector(m))
sqrt(length(as.vector(m)))
images.male[[1]]
images.male[[1]][,,1]
length(images.male)
m
as.data.frame(m)
as.data.frame(as.vector(m))
cbind(as.vector(m),as.vector(m))
rbind(as.vector(m),as.vector(m))
r <- rbind(as.vector(m),as.vector(m))
r[1,1]
r[2,1]
males <- c()
for (i in 1:length(images.male)){
m <- images.male[[i]][,,1]
m <- as.vector(m)
males <- rbind(males,m)
}
dim(males)
males.df <- as.data.frame(males)
names(males.df)
dim(males.df)
males.df["V16333"]
ncol(males.df)
colnames(males.df)
length(colnames(males.df))
colnames(males.df)[16384]
males.df['1']
males.df[,'1']
males.df[,'V1']
males.df[,'V16384']
males.df$sex <- 0
files <- list.files(path="data//Pictures_f", pattern=".png",all.files=T, full.names=T, no.. = T)
images.female <- lapply(files, readPNG)
males.df$sex
females <- c()
for (i in 1:length(images.female)){
m <- images.female[[i]][,,1]
m <- as.vector(m)
females <- rbind(females,m)
}
females.df <- as.data.frame(females)
females.df$sex <- 1
q <- rbind(males.df,females.df)
colnames(q)
length(colnames(q))
q$sex
save(file = "faces.RData",q)
A = c(1,2,3,4)
A
A[1:3]
A[2:ncol(A)]
####################
# PCA
####################
faces.pca <- prcomp(q[,2:ncol(q)],tol = 0.01)
faces.pca$sdev
faces.pca
summary(faces.pca)
dim(q[,2:ncol(q)])
dim(faces.pca$x)
dim(faces.pca$rotation)
set.seed(233)
# Compute and plot wss for k = 2 to k = 10.
k.max <- 10
wss <- sapply(1:k.max,
function(k){kmeans(faces.pca$x, k, nstart=50,iter.max = 1000 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
k.max <- 50
wss <- sapply(1:k.max,
function(k){kmeans(faces.pca$x, k, nstart=50,iter.max = 1000 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(233)
# Compute and plot wss for k = 2 to k = 10.
k.max <- 10
wss <- sapply(1:k.max,
function(k){kmeans(faces.pca$x, k, nstart=50,iter.max = 1000 )$tot.withinss})
wss
X11()
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
#when k = 4
kmean4 <- kmeans(faces.pca$x,4)
kmean4
library(factoextra)
fviz_cluster(kmean4, data = kmean4$x)
fviz_cluster(kmean4, data = faces.pca$x)
X11()
fviz_cluster(kmean4, data = faces.pca$x)
kmean4$centers
kmean4$centers[1]
nrow(kmean4$centers)
kmean4$centers[1,]
dim(faces.pca$rotation)
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- rot %*% face.average
}
origin
t(origin)
t(origin)$sex
a<-t(origin)$
a<-t(origin)
a<-t(origin)
a$sex
origin
length(origin)
ncol(q)
as.vector(origin)
ncol(as.vector(origin))
length(as.vector(origin))
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a
image(a)
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
}
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
image(a)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
image(a)
image(t(a))
image(t(t(a)))
image(a,col = grey(seq(0, 1, length = 256)))
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 256)))
image(t(a),col = grey(seq(0, 1)))
image(t(a),col = grey(seq(0, 1, length = 128)))
image(t(a),col = grey(seq(0, 1, length = 256)))
image(t(a),col = grey(seq(0, 1, length = 128)))
par(mar = rep(2, 2))
X11()
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
}
par(mar = rep(2, 2))
X11()
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
print(i)
}
X11()
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
print(i)
}
par(mfrow=c(2,2))
X11()
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
print(i)
}
dev.off()
par(mfrow=c(2,2))
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
print(i)
}
dev.off()
par(mfrow=c(2,2))
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
print(i)
}
X11()
par(mfrow=c(2,2))
rot <- faces.pca$rotation
for(i in 1:nrow(kmean4$centers)){
face.average <- kmean4$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
}
kmean5 <- kmeans(faces.pca$x,5)
X11()
fviz_cluster(kmean5, data = faces.pca$x)
X11()
par(mfrow=c(3,2))
rot <- faces.pca$rotation
for(i in 1:nrow(kmean5$centers)){
face.average <- kmean5$centers[i,]
origin <- face.average %*% t(rot)
a<-matrix(as.vector(origin),nrow = 128,ncol = 128)
a<- apply(a, 2, rev)
image(t(a),col = grey(seq(0, 1, length = 128)))
}
q
files_m <- list.files(path="data//Pictures", pattern=".png",all.files=T, full.names=T, no.. = T)
file_m
files_m
gsub("data//Pictures/", "", files_m)
names_m <- gsub(".png","",gsub("data//Pictures/","",files_m))
names_m
files_f <- list.files(path="data//Pictures_f", pattern=".png",all.files=T, full.names=T, no.. = T)
names_f <- gsub(".png","",gsub("data//Pictures_f/","",files_f))
names_f
names_f == names_m
names.all <- c(names_m,names_f)
names.all
faces.pca$x
faces.all <- faces.pca$x
faces.all$name <- names.all
faces.all
faces.all <- faces.pca$x
faces.all <- faces.pca$x
as.data.frame(faces.all,row.names = NULL)
faces.all <- as.data.frame(faces.all,row.names = NULL)
faces.all
faces.all[1,]
faces.all[1,1]
faces.all[1,2]
faces.all[1,570]
faces.all$name <- names.all
faces.all$sex <- q$sex
write.table(faces.all, "faces_pca.csv", sep=",")
write.table(faces.all, "faces_pca.csv", sep=",",row.names = F)
ncol(faces.all)
faces.pca
faces.pca$rotation
dim(faces.pca$rotation)
write.table(faces.pca$rotation, "faces_pca_rotation.csv", sep=",",row.names = F)
